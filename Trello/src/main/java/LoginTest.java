// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;

import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.*;
public class LoginTest {

    util constants = new util();

    String USERNAME = constants.username ;
    String PASSWORD = constants.password ;
    private WebDriver driver;
    private Map<String, Object> vars;
    JavascriptExecutor js;
    @Before
    public void setUp() {
        driver = new ChromeDriver();
        js = (JavascriptExecutor) driver;
        vars = new HashMap<String, Object>();
    }
    @After
    public void tearDown() {
        driver.quit();
    }

    @Test
    public void loginLogout(){
        driver.get("https://trello.com/");
        driver.manage().window().setSize(new Dimension(1280, 680));
        {
            WebElement element = driver.findElement(By.linkText("Log in"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element).perform();
        }
        driver.findElement(By.linkText("Log in")).click();
        {
            WebElement element = driver.findElement(By.tagName("body"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element, 0, 0).perform();
        }
        driver.findElement(By.id("user")).click();
        driver.findElement(By.id("user")).sendKeys(USERNAME);
        driver.findElement(By.id("user")).sendKeys(Keys.ENTER);
        Duration duration = Duration.of(10, ChronoUnit.SECONDS);
        WebDriverWait wait = new WebDriverWait(driver, duration);
        WebElement elementPassword = wait.until(ExpectedConditions.elementToBeClickable(By.id("password")));
        elementPassword.click();
//        WebElement password = driver.findElement(By.id("password"));
//        js.executeScript("arguments[0].click()",password );
        driver.findElement(By.id("password")).sendKeys(PASSWORD);
        driver.findElement(By.id("password")).sendKeys(Keys.ENTER);

        WebElement avatarIcon = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='header']/div[3]/button/div/span")));
        js.executeScript("arguments[0].click()",avatarIcon );

        WebElement logOut = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("[data-test-id='header-member-menu-logout']")));
        js.executeScript("arguments[0].click()",logOut );

        WebElement logOutSecond = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("[data-testid='logout-button']")));
        js.executeScript("arguments[0].click()",logOutSecond );

        WebElement logInButton = wait.until(ExpectedConditions.elementToBeClickable(By.linkText("Log in")));
        logInButton.isDisplayed();
    }

    @Test
    public void createAndDeleteBoard() {
        driver.get("https://trello.com/");
        driver.manage().window().setSize(new Dimension(1280, 680));
        {
            WebElement element = driver.findElement(By.linkText("Log in"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element).perform();
        }
        driver.findElement(By.linkText("Log in")).click();
        {
            WebElement element = driver.findElement(By.tagName("body"));
            Actions builder = new Actions(driver);
            builder.moveToElement(element, 0, 0).perform();
        }
        driver.findElement(By.id("user")).click();
        driver.findElement(By.id("user")).sendKeys(USERNAME);
        driver.findElement(By.id("user")).sendKeys(Keys.ENTER);
        Duration duration = Duration.of(10, ChronoUnit.SECONDS);
        WebDriverWait wait = new WebDriverWait(driver, duration);
        WebElement elementPassword = wait.until(ExpectedConditions.elementToBeClickable(By.id("password")));
        elementPassword.click();

        driver.findElement(By.id("password")).sendKeys(PASSWORD);
        driver.findElement(By.id("password")).sendKeys(Keys.ENTER);

        WebElement createElement = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".uJFM1WfH-EGEiT")));
        createElement.click();

        WebElement createBoardElement = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".R2Zt2qKgQJtkYY")));
        js.executeScript("arguments[0].click()",createBoardElement );

        driver.findElement(By.cssSelector(".nch-textfield__input")).sendKeys("Random");
        driver.findElement(By.cssSelector(".nch-textfield__input")).sendKeys(Keys.ENTER);

        WebElement newBoardName = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".js-board-editing-target.board-header-btn-text")));
        newBoardName.isDisplayed();
        assertEquals("Random",newBoardName.getText());

        driver.manage().timeouts().implicitlyWait(duration);

        Actions action = new Actions(driver);

       WebElement newBoard = driver.findElement(By.cssSelector(".BIOyZdkbd7KotX._7xO25yaQAbZ4cb"));
       action.moveToElement(newBoard);
//
        newBoard.click();

        WebElement delete = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"popover-boundary\"]/div/div[1]/nav/div[1]/div/div/div[2]/div/div[3]/ul/div[2]/li[1]/div[2]/div[1]/button/span/span")));
        js.executeScript("arguments[0].click()",delete );

        WebElement closeBoard = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[6]/div/section/div/div/button")));
        js.executeScript("arguments[0].click()",closeBoard );

        WebElement close = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[6]/div/section/div/button")));
        js.executeScript("arguments[0].click()",close );

        WebElement boardIsCloseMessage = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("[data-test-id='close-board-big-message']")));
        assertEquals("Random is closed.",boardIsCloseMessage.getText());

        WebElement avatarIcon = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id='header']/div[3]/button/div/span")));
        js.executeScript("arguments[0].click()",avatarIcon );

        WebElement logOut = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("[data-test-id='header-member-menu-logout']")));
        js.executeScript("arguments[0].click()",logOut );

        WebElement logOutSecond = wait.until(ExpectedConditions.elementToBeClickable(By.cssSelector("[data-testid='logout-button']")));
        js.executeScript("arguments[0].click()",logOutSecond );

        WebElement logInButton = wait.until(ExpectedConditions.elementToBeClickable(By.linkText("Log in")));
        logInButton.isDisplayed();

    }


}
